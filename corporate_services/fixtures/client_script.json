[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Grievance",
  "enabled": 1,
  "modified": "2024-09-27 11:25:25.348756",
  "module": "ICL Corporate Services",
  "name": "Employee Grievances Filter",
  "script": "",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Asset Requisition",
  "enabled": 1,
  "modified": "2024-08-07 08:53:11.294025",
  "module": "ICL Corporate Services",
  "name": "Asset Requisition",
  "script": "frappe.ui.form.on('Asset Requisition', {\n\trefresh(frm) {\n        frm.dashboard.add_section(`\n            <h2>IntelliSOFT Consulting Limited Asset Requisition form</h2>\n        `);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Timesheet Submission",
  "enabled": 1,
  "modified": "2024-09-05 11:12:54.562486",
  "module": "ICL Corporate Services",
  "name": "Timesheet Submission List",
  "script": "frappe.ui.form.on('Timesheet Submission', {\n    onload_post_render: function (frm) {\n        frm.set_df_property('download_template', 'hidden', 1);\n        frm.set_df_property('timesheet', 'hidden', 1);\n    },\n    \n    employee: function (frm) {\n        toggle_fields_visibility(frm);\n    },\n\n    month_year: function (frm) {\n        toggle_fields_visibility(frm);\n    },\n\n    after_save: function (frm) {\n        toggle_fields_visibility(frm);\n    }\n});\n\nfunction toggle_fields_visibility(frm) {\n    if (frm.doc.employee && frm.doc.month_year && !frm.is_new()) {\n        frm.set_df_property('download_template', 'hidden', 0);\n        frm.set_df_property('timesheet', 'hidden', 0);\n    } else {\n        frm.set_df_property('download_template', 'hidden', 1);\n        frm.set_df_property('timesheet', 'hidden', 1);\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Requisition",
  "enabled": 1,
  "modified": "2024-06-11 11:53:27.263078",
  "module": null,
  "name": "Job Requisition Notify HR",
  "script": "frappe.ui.form.on(\"Job Requisition\", {\r\n    after_save: function(frm) {\r\n        // Function to send email notification\r\n        console.log({ frm })\r\n        function sendEmailNotification(subject, message, recipients) {\r\n            console.log({ subject, message, recipients })\r\n            // frappe.call({\r\n            //     method: \"your_custom_app.module_name.script_name.send_email_notification\",\r\n            //     args: {\r\n            //         subject: subject,\r\n            //         message: message,\r\n            //         recipients: recipients\r\n            //     },\r\n            //     callback: function(response) {\r\n            //         if (response.message) {\r\n            //             frappe.show_alert(\"Email notification sent successfully\", 5);\r\n            //         } else {\r\n            //             frappe.show_alert(\"Failed to send email notification\", 5, \"error\");\r\n            //         }\r\n            //     }\r\n            // });\r\n        }\r\n\r\n        // Function to send Frappe notification\r\n        function sendFrappeNotification(message, user) {\r\n            frappe.publish_realtime(\"msgprint\", {\r\n                message: message\r\n            }, user);\r\n        }\r\n\r\n        // Get HR emails\r\n        frappe.call({\r\n            method: \"get_hr_emails\",\r\n            callback: function(response) {\r\n                console.log({ response })\r\n                // var hrEmails = response.message;\r\n                // if (hrEmails && hrEmails.length > 0) {\r\n                //     var subject = \"New Job Requisition Created\";\r\n                //     var message = \"A new job requisition (\" + frm.doc.name + \") has been created.\\n\\nPlease take necessary action.\";\r\n                //     sendEmailNotification(subject, message, hrEmails);\r\n                //     sendFrappeNotification(\"New job requisition '\" + frm.doc.name + \"' created\", frappe.session.user);\r\n                // }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Timesheet Submission",
  "enabled": 1,
  "modified": "2025-05-19 08:01:30.427186",
  "module": "ICL Corporate Services",
  "name": "Timesheet Import",
  "script": "frappe.ui.form.on('Timesheet Submission', {\n    refresh: function(frm) {\n        // Only show the Import Timesheet button if it hasn't been imported yet\n        if (!frm.doc.timesheet_imported) {\n            frm.add_custom_button(__('Import Timesheet'), function() {\n                if (frm.doc.timesheet) {\n                    frappe.call({\n                        method: 'corporate_services.api.timesheet.timesheet_import.timesheet_import',\n                        args: {\n                            docname: frm.doc.name\n                        },\n                        callback: function(response) {\n                            if (response.message === 'success') {\n                                // Add the success message here\n                                frappe.msgprint(__('Employee timesheet created successfully.'));\n                                frm.set_value('timesheet_imported', 1); \n                                fetch_timesheets_for_employee(frm);\n                                frm.save();\n                            } else {\n                                frappe.msgprint(__('There was an error creating the employee timesheet.'));\n                            }\n                        }\n                    });\n                } else {\n                    frappe.msgprint(__('Please upload a timesheet file before importing.'));\n                }\n            }, __('Actions'));\n        } else {\n            // If timesheet is already imported, just fetch the timesheets\n            fetch_timesheets_for_employee(frm);\n        }\n    }\n});\n\nfunction fetch_timesheets_for_employee(frm) {\n    frappe.call({\n        method: 'corporate_services.api.timesheet.timesheet_fetch.fetch_timesheets_for_employee',\n        args: {\n            employee_id: frm.doc.employee,\n            month: frm.doc.month_year,\n            docname: frm.doc.name\n        },\n        callback: function(r) {\n            if (!r.exc) {\n                frm.clear_table('timesheet_per_project');\n                if (r.message && r.message.timesheets && r.message.timesheets.length > 0) {\n                    r.message.timesheets.forEach(function(timesheet) {\n                        let child = frm.add_child('timesheet_per_project');\n                        child.timesheet = timesheet.name;\n                        child.total_hours = timesheet.total_hours;\n                        child.project = timesheet.parent_project;\n                        child.month = timesheet.custom_month;\n                        child.percent = timesheet.percent_pay;\n                        child.pay = timesheet.pay_for_project;\n                        child.timesheet_type = timesheet.custom_timesheet_type;\n                        child.status = timesheet.status;\n                    });\n                    frm.refresh_field('timesheet_per_project');\n                    \n                    frm.set_value('total_working_hours', r.message.total_working_hours);\n                } else {\n                    frappe.msgprint(__('No timesheets found for the employee.'));\n                }\n            } else {\n                frappe.msgprint(__('There was an error fetching timesheets.'));\n            }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Timesheet Submission",
  "enabled": 1,
  "modified": "2024-07-04 16:59:26.209612",
  "module": "ICL Corporate Services",
  "name": "Timesheet Template Generation",
  "script": "frappe.ui.form.on('Timesheet Submission', {\n    refresh: function(frm) {\n        frm.fields_dict.download_template.$input.on('click', function() {\n            frappe.call({\n                method: \"corporate_services.api.timesheet.timesheet_generation_export.timesheet_generation_export\",\n                args: {\n                    docname: frm.doc.name\n                },\n                callback: function(r) {\n                    if (r.message && typeof r.message === 'string' && r.message !== \"error\") {\n                        var download_url = r.message;\n                        window.open(download_url, '_blank');\n                        \n                    } else if (r.message && typeof r.message === 'object') {\n                        var download_url = r.message.file_url;\n                        window.open(download_url, '_blank');\n                        \n                    } else {\n                        frappe.msgprint(__(\"Failed to generate CSV file. Please check logs for details.\"));\n                    }\n                }\n            });\n        });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Travel Request",
  "enabled": 0,
  "modified": "2024-08-02 08:06:55.658472",
  "module": "ICL Corporate Services",
  "name": "Travel Request Filters",
  "script": "frappe.ui.form.on('Travel Request', {\n\trefresh(frm) {\n\t\tfrm.set_query('employee', function() {\n            return {\n                filters: {\n                    user_id: frappe.session.user\n                }\n            };\n        });\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Continuity Plan",
  "enabled": 1,
  "modified": "2024-06-11 08:34:52.784625",
  "module": "ICL Corporate Services",
  "name": "Work Continuity Plan leave Checklist",
  "script": "frappe.ui.form.on('Work Continuity Plan', {\n\trefresh(frm) {\n     // Insert HTML using jQuery\n        frm.dashboard.add_section(`\n        <h2>IntelliSOFT CONSULTING Work Continuity Plan</h2>\n            <br>\n            <h3>Leave Checklist</h3>\n            <ol>\n                <li>Set out-of-office Autoresponder.</li>\n                <li>Set out-of-office calender.</li>\n                <li>Log off email & work docs.</li>\n            </ol>\n        `);\t\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Travel Request",
  "enabled": 1,
  "modified": "2024-11-06 20:07:51.518917",
  "module": "ICL Corporate Services",
  "name": "Travel Request Actions",
  "script": "frappe.ui.form.on('Travel Request', {\n    refresh: function(frm) {\n        // Insert HTML using jQuery\n        frm.dashboard.add_section(`\n        <section> \n            <h2>IntelliSOFT CONSULTING TRAVEL AUTHORIZATION FORM <h2>\n            <br>\n            <h3>Instructions</h3>\n            <ol>\n                <li>Please fill out the Travel Authorization Form below.</li>\n                <li>Obtain approval from your direct supervisor and HR/Operations and Finance Office prior to making reservations.</li>\n                <li>Attach a detailed travel budget using the ICL travel budget template.</li>\n            </ol>\n        </section>\n      \n        <hr>\n        \n        <section>\n            <div class=\"instructions-toggle\" style=\"cursor: pointer; display: flex; align-items: center;\" data-toggle=\"collapse\" data-target=\"#instructions-section\" aria-expanded=\"false\" aria-controls=\"instructions-section\">\n                <span style=\"font-weight: bold; margin-right: 8px;\">INTELLISOFT CONSULTING STANDARD OPERATING PROCEDURES - STAFF TRAVEL PER DIEM AND EXPENSES</span>\n                <i class=\"fa fa-angle-down\" id=\"instructions-arrow\" style=\"transition: transform 0.2s;\"></i>\n            </div>\n            <div id=\"instructions-section\" class=\"collapse mt-2\">\n            <div>\n                <h4 class=\"mt-2\">INTRODUCTION/OBJECTIVES:</h4>\n                <p>These procedures aim to provide guidance for IntelliSOFT staff business travel expenses including their per diem, accommodation, taxi hire and airtime charges. The main purpose of these procedures is to: </p>\n                <ol>\n                    <li>Provide guidance to staff so that they can manage and account travel funds in the most efficient and effective way to ensure that proper procedures are followed when travel services are being procured\n                    </li>\n                    <li>Ensure all field staff have a clear and consistent understanding of policies and procedures for travel expenses</li>\n                    <li>Maximize the ability of those managing business travel to negotiate discounted rates with preferred suppliers and reduce travel expenses .</li>\n                    <li>To ensure that all related expenses are at a reasonable cost.</li>\n                </ol>\n            </div>\n            <div>\n                <h4>PROCEDURES</h4>\n                <ol>\n                    <li>Staff will place a duly completed  travel authorization form accompanied by a detailed travel budget and per diem request form via email. These will be submitted to the budget manager/supervisor 2 weeks before departure. Requests submitted late will not be processed.</li>\n                    <li>All anticipated travel expenses e.g excess luggage expense, medical tests, visa processing fees must be included in the per diem request form and approved by the budget manager</li>\n                    <li>Staff must uphold integrity and transparency when claiming for per diem reimbursements. </li>\n                    <li>It is the responsibility of each budget manager/supervisor to review the travel request and satisfy themselves that each booking is for legitimate business use and conforms to the requirements outlined. The budget holder always has the ultimate responsibility for ensuring that their budget is managed in a legitimate and controlled manner.</li>\n                    <li>The hotel(s) will provide receipts/vouchers to be signed by the staff upon receiving their services and this will be attached to the payments as support documentation</li>\n                    <li>InteliSOFT will always endeavor to make prior enquiries as far hotel accommodation charges are concerned whether they are half board or bed/breakfast only, should be keen to verify the costs to ensure reasonableness of costs and take note of any discounted rates offered by hotels.</li>\n                    <li>IntelliSOFT will also identify taxi companies/transport service providers (including rentals where necessary)that will offer ground transport services to any  staff traveling for business purposes. </li>\n                    <li>Credit vendor agreements will be prepared and approved by the Directors. All invoices will be forwarded to Finance for payment on a monthly basis or as stipulated in the vendor agreement.</li>\n                    <li>Accommodation receipts should be attached to the reconciliation.</li>\n                    <li>Not that, all original receipts should be attached in the reconciliation sheet and must have the following minimum requirements:</li>\n                    <ol>\n                        <li>Name of the traveler.</li>\n                        <li>Dates should be within the authorized travel period. </li>\n                        <li>Hotel receipts must be supported with an ETR printout or stamped.</li>\n                    </ol>\n                </ol>\n                <p>They must also negotiate for reasonable charges.</p>\n                <ol>\n                    <li>Airfare costs shall not exceed economy class airfare and a boarding pass shall be provided upon return as support documentation </li>\n                    <li>Airtime expenses will not be reimbursed to staff since IntelliSOFT provides monthly airtime benefits to all staff. In case a staff MUST incur extra communication expenses they need to be pre-approved by their Supervisor or authorised designat(s) before spending. </li>\n                    <li>Staff and consultants will fill in the per diem reconciliation form within 5 days upon completion of their official trip and a  trip report summary form within 3 days upon completion of their official trip, and return to their workstation.  Staff are to attach all necessary receipts (where applicable), failure to which the full advance shall be liable to be deducted in the subsequent remuneration. </li>\n\n                    <li>No staff should hold two advances at any one time. Therefore, before a new advance is issued, the Finance & Admin Executive must ensure that the staff concerned does not have any unaccounted advance. </li>\n                    <li>Employees may be entitled to compensation for certain unforeseen expenses such as stationery, printing, visa processing charges, laundry (where applicable) e.t.c.  Such claims shall be considered only on presentation of documented justification and valid original receipts in support of their claim and once finance is satisfied that supporting documents are genuine.  All such expenses shall be reported and claimed through an approved reconciliation for </li>\n                    <li>It is the responsibility of the staff member to obtain approvals from their supervisors before submitting to Finance for processing of any refunds eligible to him/her. This will be done on email. </li>\n                    <li>\n                        Any unspent funds MUST be deposited to the Organization’s bank Account details below: \n                        <div class=\"ml-4\">\n                            <b>BANK NAME: NCBA Bank</b></br>\n                            <b>ACCOUNT NAME:  IntelliSOFT Consulting Limited</b></br>\n                            <b>KES ACCOUNT NUMBER: 2147930056</b></br>\n                            <b>USD ACCOUNT NUMBER: 2147930048</b>\n                        </div>\n                    </li>\n                </ol>\n                    \n                    <p>Finance will not receive any balances in cash. One can deposit  to the bank or transfer from your account or use  paybill No.following this steps:\n                    <ul>\n                        <li>Go To M-Pesa Toolkit</li>\n                        <li>Select Lipa Na M-Pesa</li>\n                        <li>Go to Paybill and Enter NCBA Business Paybill number 880100</li>\n                        <li>Enter your NCBA Bank Account Number in the account number option(2147930056)</li>\n                        <li>Input the Amount to deposit</li>\n                        <li>Enter MPesa PIN and confirm your details</li>\n                        <li>Click Send.</li>\n                    </ul>\n                    <p>The funds should be deposited after the verification of the reconciliation by the Finance department.</p>\n                </div>  \n            </div>\n        </section>\n        `);\n\n        $('#instructions-section').on('show.bs.collapse', function () {\n            $('#instructions-arrow').css('transform', 'rotate(180deg)');\n        }).on('hide.bs.collapse', function () {\n            $('#instructions-arrow').css('transform', 'rotate(0deg)');\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Asset Custodianship Requisition",
  "enabled": 1,
  "modified": "2024-09-02 10:52:59.803004",
  "module": "ICL Corporate Services",
  "name": "Asset Custodianship Requisition Terms",
  "script": "frappe.ui.form.on('Asset Custodianship Requisition', {\n\trefresh(frm) {\n        frm.dashboard.add_section(`\n        <h2>Asset Custodianship Requisition Application Form</h2>\n            <br>\n            <p>In acceptance of this asset for usage, I agree to the terms and conditions stated below:</p>\n            <ul>\n                <li>I understand that I am responsible for the asset whilst in my possession, regardless of whether the asset is used in the office, at my place of residence, or in any other location such as a hotel, conference room, car or airport.</li>\n                <li>I am responsible for keeping the asset in good condition while using it and until the time of return.</li>\n                <li>I should be the only authorized person to have access to and use this asset, any unauthorized access to this asset is a violation of this company's policy and employment regulation and employment/consultant contract.</li>\n                <li>In the event of loss, theft, or damage, this must be reported to the police within 24-48 hours, and a copy of a Police report or incident report must be submitted to the company for verification purposes.</li>\n                <li>I understand that any violation of these policies shall lead to a disciplinary action by the company.</li>\n            </ul>\n        `);\t\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Grievance",
  "enabled": 1,
  "modified": "2024-11-28 08:25:49.086167",
  "module": "ICL Corporate Services",
  "name": "Grievance Script",
  "script": "frappe.ui.form.on('Employee Grievance', {\n    refresh: function(frm) {\n        function toggle_fields() {\n            const isHRManager = frappe.user.has_role('HR Manager');\n            frm.toggle_display('cause_of_grievance', isHRManager);\n            frm.toggle_display('resolution_detail', isHRManager);\n        }\n\n        toggle_fields();\n\n        frm.fields_dict.workflow_state.$input.on('change', function() {\n            toggle_fields();\n        });\n    },\n    before_save: function(frm) {\n        if (!frappe.user.has_role('HR Manager')) {\n            frm.toggle_display('cause_of_grievance', false);\n            frm.toggle_display('resolution_detail', false);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2024-12-13 16:08:54.345695",
  "module": "ICL Corporate Services",
  "name": "Annual leave 7 days notice period",
  "script": "frappe.ui.form.on('Leave Application', {\n    from_date: function(frm) {\n        // Check if the leave type is Annual Leave\n        if (frm.doc.leave_type === 'Annual Leave') {\n            // Check if the user is not an HR Manager\n            if (!frappe.user_roles.includes('HR Manager')) {\n                const noticePeriod = frm.doc.annual_leave_notice_period || 7;\n                const minDate = frappe.datetime.add_days(frappe.datetime.get_today(), noticePeriod);\n                if (frm.doc.from_date < minDate) {\n                    frappe.msgprint(\"You must apply for Annual Leave at least \" + noticePeriod + \" days in advance.\");\n                    frm.set_value('from_date', '');\n                    frappe.validated = false;\n                }\n            }\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Asset Movement",
  "enabled": 1,
  "modified": "2024-07-29 15:04:11.232485",
  "module": "ICL Corporate Services",
  "name": "Finance Members Filter",
  "script": "frappe.ui.form.on('Asset Movement', {\n    refresh: function(frm) {\n        frappe.call({\n            method: 'corporate_services.api.role.user.get_finance_employees',\n            callback: function(response) {\n                if (response.message) {\n                    let employees = response.message;\n                    frm.set_query('custom_receiver', function() {\n                        return {\n                            filters: {\n                                'name': ['in', employees]\n                            }\n                        };\n                    });\n                }\n            }\n        });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Timesheet Submission",
  "enabled": 1,
  "modified": "2024-08-21 08:38:45.782833",
  "module": "ICL Corporate Services",
  "name": "Workflow state change",
  "script": "frappe.ui.form.on('Timesheet Submission', {\n    validate: function(frm) {\n        if (frm.doc.workflow_state === 'Submitted to Supervisor' && !frm.doc.timesheet) {\n            // Reset the workflow state to Draft\n            frm.set_value('workflow_state', 'Draft');\n\n            // Display a message to the user\n            frappe.msgprint(__('You must upload a timesheet before submitting to the supervisor. Workflow state has been reset to Draft.'));\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Timesheet Submission",
  "enabled": 1,
  "modified": "2024-08-05 10:29:39.969902",
  "module": "ICL Corporate Services",
  "name": "Timesheet Submission Details",
  "script": "frappe.ui.form.on('Timesheet Submission', {\n    refresh: function(frm) {\n        function toggle_fields() {\n            if (frappe.user.has_role('Employee')) {\n                if (frm.doc.workflow_state === 'Draft') {\n                    frm.toggle_display(['internal_monthly_timesheet','timesheet_per_project'], true);\n                }else {\n                    frm.toggle_display(['internal_monthly_timesheet','timesheet_per_project'], true);\n                }\n            }\n            if (frappe.user.has_role('Finance')) {\n                if (frm.doc.workflow_state === 'Submitted to HR') {\n                    frm.toggle_display(['internal_monthly_timesheet','timesheet_per_project'], true);\n                }\n            }\n        }\n\n        toggle_fields();\n\n        frm.fields_dict.workflow_state.$input.on('change', function() {\n            toggle_fields();\n        });\n    },\n    before_save: function(frm) {\n        if (frappe.user.has_role('Employee')) {\n            frm.toggle_display(['internal_monthly_timesheet','timesheet_per_project'], false);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Timesheet Submission",
  "enabled": 1,
  "modified": "2024-11-29 14:57:01.859862",
  "module": "ICL Corporate Services",
  "name": "Timesheet Month Year",
  "script": "frappe.ui.form.on('Timesheet Submission', {\n    month_year: function(frm) {\n        const monthYear = frm.doc.month_year;\n        const monthYearPattern = /^(0[1-9]|1[0-2])-(\\d{4})$/;\n        if (monthYear && !monthYearPattern.test(monthYear)) {\n            frappe.show_alert({\n                message: __('Please enter Month-Year in MM-YYYY format.'),\n                indicator: 'orange'\n            });\n        }\n    },\n    onload: function(frm) {\n        if (!frm.doc.month_year) {\n            frm.set_value('month_year', moment().format('MM-YYYY'));\n        }\n    },\n    before_save: function(frm) {\n        const monthYear = frm.doc.month_year;\n        const monthYearPattern = /^(0[1-9]|1[0-2])-(\\d{4})$/;\n        if (monthYear && !monthYearPattern.test(monthYear)) {\n            frappe.msgprint(__('Please enter Month-Year in MM-YYYY format.'));\n            frappe.validated = false;\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2024-11-15 08:39:21.988262",
  "module": "ICL Corporate Services",
  "name": "Employee Permission Role Manager",
  "script": "frappe.ui.form.on('Employee', {\n    refresh: function(frm) {\n        frappe.call({\n            method: 'corporate_services.api.role.get_role.get_user_roles',\n            args: {\n                user: frappe.session.user\n            },\n            callback: function(response) {\n                const roles = response.message || [];\n                console.log('User Roles:', roles);\n\n                const isHRUser = roles.includes('HR Manager');\n                const isFinanceUser = roles.includes('Finance');\n                const isCurrentUser = frappe.session.user === frm.doc.user_id;\n\n                const fieldsToToggle = [\n                    'marital_status',\n                    'family_background', 'blood_group', 'health_details', \n                    'custom_pwds', 'custom_specify_the_pwds',\n                    'health_insurance_provider', 'health_insurance_no',\n                    'passport_number', 'valid_upto', 'date_of_issue',\n                    'place_of_issue', 'custom_name_of_the_body',\n                    'custom_membership_status', 'custom_date_of_membership',\n                    'custom_membership_no',\n                    'custom_employee_confidential_information',\n                    'custom_attache_documents',\n                    'custom_next_of_kin',\n                    'custom_beneficiary',\n                    'custom_beneficiary_relation',\n                    'address_section',\n                ];\n\n                const sectionsToToggle = [\n                    'custom_salary_section', \n                    'bank_details_section', \n                    'custom_contract_terms',\n                    'custom_contract_terms_section',\n\n                ];\n\n                // Helper function to toggle visibility\n                const toggleFieldVisibility = (fields, visibility) => {\n                    fields.forEach(field => {\n                        frm.set_df_property(field, 'hidden', !visibility);\n                    });\n                };\n\n                // Toggle sections based on HR, Finance, or current user\n                const canViewSalaryAndBankDetails = isHRUser || isFinanceUser || isCurrentUser;\n                toggleFieldVisibility(sectionsToToggle, canViewSalaryAndBankDetails);\n\n                // Toggle other fields based on HR or current user\n                const canViewFields = isHRUser || isCurrentUser;\n                toggleFieldVisibility(fieldsToToggle, canViewFields);\n            },\n            error: function(err) {\n                console.error(\"Error fetching roles:\", err);\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Project",
  "enabled": 0,
  "modified": "2024-10-29 16:22:27.043243",
  "module": "ICL Corporate Services",
  "name": "Total Received Amount for a project",
  "script": "frappe.ui.form.on('Project', {\n    refresh: function(frm) {\n        // Calculate the total amount received for the project\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Payment Entry',\n                filters: {\n                    'project': frm.doc.name,\n                    'docstatus': 1\n                },\n                fields: ['paid_amount']\n            },\n            callback: function(r) {\n                if (r.message) {\n                    const total_received = r.message.reduce((acc, row) => acc + row.paid_amount, 0);\n                    frm.set_value('custom_total_amount_received', total_received);\n\n                    // Calculate custom_funds_received_balance if custom_actual_expenses is defined\n                    if (frm.doc.custom_actual_expenses !== undefined) {\n                        const funds_received_balance = total_received - frm.doc.custom_actual_expenses;\n                        frm.set_value('custom_funds_received_balance', funds_received_balance);\n\n                        // Calculate custom_burn_rate\n                        const burn_rate = frm.doc.custom_actual_expenses / total_received;\n                        frm.set_value('custom_burn_rate', burn_rate);\n                    }\n                }\n            }\n        });\n    },\n    \n    // Trigger calculations when custom_actual_expenses changes\n    custom_actual_expenses: function(frm) {\n        if (frm.doc.custom_total_amount_received !== undefined) {\n            // Update custom_funds_received_balance\n            const funds_received_balance = frm.doc.custom_total_amount_received - frm.doc.custom_actual_expenses;\n            frm.set_value('custom_funds_received_balance', funds_received_balance);\n            \n            // Update custom_overall_budget_balance if custom_cost is defined\n            if (frm.doc.custom_cost !== undefined) {\n                const overall_budget_balance = frm.doc.custom_cost - frm.doc.custom_actual_expenses;\n                frm.set_value('custom_overall_budget_balance', overall_budget_balance);\n                \n                // Calculate custom_overall_project_burn_rate\n                const overall_burn_rate = frm.doc.custom_actual_expenses / frm.doc.custom_cost;\n                frm.set_value('custom_overall_project_burn_rate', overall_burn_rate);\n            }\n\n            // Update custom_burn_rate\n            const burn_rate = frm.doc.custom_actual_expenses / frm.doc.custom_total_amount_received;\n            frm.set_value('custom_burn_rate', burn_rate);\n        }\n    },\n\n    // Trigger cost and balance calculations when custom_rate changes\n    custom_rate: function(frm) {\n        if (frm.doc.custom_days !== undefined) {\n            const cost = frm.doc.custom_rate * frm.doc.custom_days;\n            frm.set_value('custom_cost', cost);\n\n            // Calculate overall budget balance if custom_actual_expenses is defined\n            if (frm.doc.custom_actual_expenses !== undefined) {\n                const overall_budget_balance = cost - frm.doc.custom_actual_expenses;\n                frm.set_value('custom_overall_budget_balance', overall_budget_balance);\n                \n                // Calculate custom_overall_project_burn_rate\n                const overall_burn_rate = frm.doc.custom_actual_expenses / cost;\n                frm.set_value('custom_overall_project_burn_rate', overall_burn_rate);\n            }\n        }\n    },\n\n    // Trigger cost and balance calculations when custom_days changes\n    custom_days: function(frm) {\n        if (frm.doc.custom_rate !== undefined) {\n            const cost = frm.doc.custom_rate * frm.doc.custom_days;\n            frm.set_value('custom_cost', cost);\n\n            // Calculate overall budget balance if custom_actual_expenses is defined\n            if (frm.doc.custom_actual_expenses !== undefined) {\n                const overall_budget_balance = cost - frm.doc.custom_actual_expenses;\n                frm.set_value('custom_overall_budget_balance', overall_budget_balance);\n                \n                // Calculate custom_overall_project_burn_rate\n                const overall_burn_rate = frm.doc.custom_actual_expenses / cost;\n                frm.set_value('custom_overall_project_burn_rate', overall_burn_rate);\n            }\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2024-12-04 11:37:54.034791",
  "module": "ICL Corporate Services",
  "name": "Payment Entry Budget Line",
  "script": "frappe.ui.form.on('Payment Entry', {\n   refresh: function(frm) {\n    }\n});\n\nfrappe.ui.form.on('Budget Line Template', {\n    unit: function(frm, cdt, cdn) {\n        calculate_cost(frm, cdt, cdn);\n    },\n    rate: function(frm, cdt, cdn) {\n        calculate_cost(frm, cdt, cdn);\n    },\n    budget_line_template_remove: function(frm, cdt, cdn) {\n        calculate_total_cost(frm);\n    },\n    budget_line_template_add: function(frm, cdt, cdn) {\n        calculate_total_cost(frm);\n    }\n});\n\nfunction calculate_cost(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    let unit_loe = flt(row.unit_loe) || 0;\n    let rate = flt(row.rate) || 0;\n    \n    frappe.model.set_value(cdt, cdn, 'cost', flt(unit_loe * rate))\n        .then(() => calculate_total_cost(frm));\n}\n\nfunction calculate_total_cost(frm) {\n    let custom_total_cost = 0;\n    if(frm.doc.custom_budget_line_details) {\n        custom_total_cost = frm.doc.custom_budget_line_details.reduce((total, row) => {\n            return total + (flt(row.cost) || 0);\n        }, 0);\n    }\n    \n    frm.set_value('custom_total_cost', flt(custom_total_cost));\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "HR Settings",
  "enabled": 1,
  "modified": "2024-11-05 11:09:06.806353",
  "module": "ICL Corporate Services",
  "name": "Annual Leave allocation - HR Settings",
  "script": "frappe.ui.form.on('HR Settings', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Annual Leave Allocation'), function() {\n            // Call the function when the button is clicked\n            frappe.call({\n                method: \"corporate_services.api.leave.update_annual_leave_allocations.update_annual_leave_allocations\",\n                args: {\n                    // Pass any necessary arguments here\n                },\n                callback: function(response) {\n                    if(response.message) {\n                        frappe.msgprint(__(response.message));\n                    }\n                }\n            });\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Salary Structure Assignment",
  "enabled": 0,
  "modified": "2024-11-06 08:48:24.803886",
  "module": "ICL Corporate Services",
  "name": "Salary Structure Assignment (Preview)",
  "script": "frappe.ui.form.on('Salary Structure Assignment', {\n    preview: function(frm) {\n        // Call a server-side function or trigger salary slip calculations\n        frappe.call({\n            method: \"erpnext.payroll.doctype.salary_slip.salary_slip.calculate_net_pay\",\n            args: {\n                'salary_structure_assignment': frm.doc.name\n            },\n            callback: function(response) {\n                // Display the fully calculated preview\n                frm.refresh_fields();\n            }\n        });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Travel Request",
  "enabled": 1,
  "modified": "2025-05-20 11:27:35.861237",
  "module": "ICL Corporate Services",
  "name": "Per Diem Rates Place of Travel Preview",
  "script": "frappe.ui.form.on('Travel Request', {\n    onload: function(frm) {\n        frm.set_df_property(\"custom_icl_proposed_transport_matrix\", \"hidden\", 1);\n        frm.set_df_property(\"custom_local_place_of_travel\", \"hidden\", 1);\n        frm.set_df_property(\"custom_place_of_travel_per_diem\", \"hidden\", 1);\n        \n        // Check if travel type is already set and show relevant fields\n        if (frm.doc.travel_type == \"Domestic\") {\n            frm.set_df_property(\"custom_local_place_of_travel\", \"hidden\", 0);\n            frm.set_df_property(\"custom_icl_proposed_transport_matrix\", \"hidden\", 0);\n        } else if (frm.doc.travel_type == \"International\") {\n            frm.set_df_property(\"custom_place_of_travel_per_diem\", \"hidden\", 0);\n        }\n    },\n\n    refresh: function(frm) {\n        if (!frm.doc.travel_type || frm.doc.travel_type == 0) {\n            frm.set_df_property(\"custom_icl_proposed_transport_matrix\", \"hidden\", 1);\n            frm.set_df_property(\"custom_local_place_of_travel\", \"hidden\", 1);\n            frm.set_df_property(\"custom_place_of_travel_per_diem\", \"hidden\", 1);\n        } else if (frm.doc.travel_type == \"Domestic\") {\n            frm.set_df_property(\"custom_local_place_of_travel\", \"hidden\", 0);\n            frm.set_df_property(\"custom_icl_proposed_transport_matrix\", \"hidden\", 0);\n            frm.set_df_property(\"custom_place_of_travel_per_diem\", \"hidden\", 1);\n        } else if (frm.doc.travel_type == \"International\") {\n            frm.set_df_property(\"custom_place_of_travel_per_diem\", \"hidden\", 0);\n            frm.set_df_property(\"custom_local_place_of_travel\", \"hidden\", 1);\n            frm.set_df_property(\"custom_icl_proposed_transport_matrix\", \"hidden\", 1);\n        }\n    },\n\n    custom_place_of_travel_per_diem: function(frm) {\n        if (frm.doc.custom_place_of_travel_per_diem) {\n            frm.set_df_property(\"custom_per_diem_rates\", \"hidden\", 0);\n\n            frappe.call({\n                method: \"corporate_services.api.travel_request.travel_request.get_per_diem_rates\",\n                args: {\n                    place: frm.doc.custom_place_of_travel_per_diem\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frm.clear_table(\"custom_per_diem_rates\");\n\n                        r.message.forEach(item => {\n                            let row = frm.add_child(\"custom_per_diem_rates\");\n                            row.place_of_travel = item.place_of_travel;\n                            row.accommodation_max = item.accommodation_max;\n                            row.accommodation_min = item.accommodation_min;\n                            row.meal_incidentals_expenses_max = item.meal_incidentals_expenses_max;\n                            row.meal_incidentals_expenses_min = item.meal_incidentals_expenses_min;\n                        });\n\n                        frm.refresh_field(\"custom_per_diem_rates\");\n                    }\n                }\n            });\n        } else {\n            frm.set_df_property(\"custom_per_diem_rates\", \"hidden\", 1);\n            frm.clear_table(\"custom_per_diem_rates\");\n            frm.refresh_field(\"custom_per_diem_rates\");\n        }\n    },\n\n    travel_type: function(frm) {\n        // Hide all travel-type specific fields first\n        frm.set_df_property(\"custom_local_place_of_travel\", \"hidden\", 1);\n        frm.set_df_property(\"custom_icl_proposed_transport_matrix\", \"hidden\", 1);\n        frm.set_df_property(\"custom_place_of_travel_per_diem\", \"hidden\", 1);\n        \n        // Clear fields that are no longer relevant\n        if (frm.doc.travel_type == \"Domestic\") {\n            frm.set_df_property(\"custom_local_place_of_travel\", \"hidden\", 0);\n            frm.set_value(\"custom_place_of_travel_per_diem\", \"\");\n            frm.refresh_field(\"custom_place_of_travel_per_diem\");\n            \n            // If there's already a place selected, fetch its transport matrix\n            if (frm.doc.custom_local_place_of_travel) {\n                updateTransportMatrix(frm);\n            } else {\n                frm.clear_table(\"custom_icl_proposed_transport_matrix\");\n                frm.refresh_field(\"custom_icl_proposed_transport_matrix\");\n            }\n        } else if (frm.doc.travel_type == \"International\") {\n            frm.set_df_property(\"custom_place_of_travel_per_diem\", \"hidden\", 0);\n            frm.set_value(\"custom_local_place_of_travel\", \"\");\n            frm.refresh_field(\"custom_local_place_of_travel\");\n            frm.clear_table(\"custom_icl_proposed_transport_matrix\");\n            frm.refresh_field(\"custom_icl_proposed_transport_matrix\");\n        } else {\n            // If travel type is cleared or set to something else\n            frm.set_value(\"custom_local_place_of_travel\", \"\");\n            frm.set_value(\"custom_place_of_travel_per_diem\", \"\");\n            frm.refresh_field(\"custom_local_place_of_travel\");\n            frm.refresh_field(\"custom_place_of_travel_per_diem\");\n            frm.clear_table(\"custom_icl_proposed_transport_matrix\");\n            frm.refresh_field(\"custom_icl_proposed_transport_matrix\");\n        }\n    },\n\n    // Add a new handler for when the local place of travel changes\n    custom_local_place_of_travel: function(frm) {\n        if (frm.doc.travel_type == \"Domestic\" && frm.doc.custom_local_place_of_travel) {\n            updateTransportMatrix(frm);\n        } else {\n            frm.set_df_property(\"custom_icl_proposed_transport_matrix\", \"hidden\", 1);\n            frm.clear_table(\"custom_icl_proposed_transport_matrix\");\n            frm.refresh_field(\"custom_icl_proposed_transport_matrix\");\n        }\n    }\n});\n\n// Extract the logic for updating the transport matrix into a separate function\nfunction updateTransportMatrix(frm) {\n    const selected_place = frm.doc.custom_local_place_of_travel;\n    \n    // Show the transport matrix field\n    frm.set_df_property(\"custom_icl_proposed_transport_matrix\", \"hidden\", 0);\n\n    frappe.call({\n        method: \"corporate_services.api.travel_request.travel_request.get_local_per_diem_rates\",\n        args: {\n            place: selected_place\n        },\n        callback: function(r) {\n            if (r.message) {\n                frm.clear_table(\"custom_icl_proposed_transport_matrix\");\n\n                r.message.forEach(item => {\n                    let row = frm.add_child(\"custom_icl_proposed_transport_matrix\");\n                    row.from = item.from;\n                    row.to_countries = item.to_countries;\n                    row.province = item.province;\n                    row.transport_means_of_travel = item.transport_means_of_travel;\n                    row.fares = item.fares;\n                    row.m_i = item.m_i;\n                    row.accommodation = item.accommodation;\n                });\n\n                frm.refresh_field(\"custom_icl_proposed_transport_matrix\");\n            }\n        }\n    });\n}\n\nfrappe.ui.form.on('Travel Request Activity Participants', {\n    hotel_accomodation: function(frm, cdt, cdn) {\n        calculate_totals(frm);\n    },\n    meals_incedentals: function(frm, cdt, cdn) {\n        calculate_totals(frm);\n    },\n    fx_rate: function(frm, cdt, cdn) {\n        calculate_totals(frm);\n    },\n    total: function(frm, cdt, cdn) {\n        calculate_totals(frm);\n    }\n});\n\nfunction calculate_totals(frm) {\n    let grand_total = 0;\n    let grand_total_local_currency = 0;\n\n    frm.doc.custom_activity_participants_table.forEach(row => {\n        row.total = (parseFloat(row.hotel_accomodation) || 0) + (parseFloat(row.meals_incedentals) || 0);\n\n        row.local_currency = (row.total || 0) * (parseFloat(row.fx_rate) || 1);\n\n        grand_total += row.total;\n        \n        grand_total_local_currency += row.local_currency;\n    });\n\n    const formatted_grand_total = new Intl.NumberFormat().format(grand_total);\n    const formatted_grand_total_local_currency = new Intl.NumberFormat().format(grand_total_local_currency);\n\n    frm.set_value(\"custom_expected_support\", formatted_grand_total);\n    frm.set_value(\"custom_amount_in_local_currency\", formatted_grand_total_local_currency);\n\n    frm.refresh_field(\"custom_activity_participants_table\");\n    frm.refresh_field(\"custom_expected_support\");\n    frm.refresh_field(\"custom_amount_in_local_currency\");\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Travel Request Reconciliation",
  "enabled": 1,
  "modified": "2024-12-20 09:36:18.739049",
  "module": "ICL Corporate Services",
  "name": "Travel Request Reconciliation",
  "script": "frappe.ui.form.on('Travel Request Reconciliation', {\n    onload: function(frm) {\n        frm.set_query(\"travel_request\", function() {\n            return {\n                filters: {\n                    workflow_state: \"Approved by Finance\"\n                }\n            };\n        });\n    },\n\n\n    currency: function(frm) {\n        if (frm.doc.currency) {\n            frappe.db.get_doc('Currency', frm.doc.currency)\n                .then(currency => {\n                    if (currency) {\n                        calculate_totals(frm);\n                    }\n                })\n                .catch(error => {\n                    console.error('Error fetching currency:', error);\n                });\n        }\n    },\n\n    before_save: function(frm) {\n        calculate_totals(frm);\n    }\n});\n\nfrappe.ui.form.on('Activity Participants Reconciliation', {\n    total_paid: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        let total_paid = parseFloat(row.total_paid) || 0;\n        let fx_rate = parseFloat(row.fx_rate) || 0;\n        \n        row.amount_in_local_currency = total_paid * fx_rate;\n        frm.refresh_field('activity_participants_reconciliation');\n        calculate_totals(frm);\n    },\n\n    fx_rate: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        let total_paid = parseFloat(row.total_paid) || 0;\n        let fx_rate = parseFloat(row.fx_rate) || 0;\n        \n        row.amount_in_local_currency = total_paid * fx_rate;\n        frm.refresh_field('activity_participants_reconciliation');\n        calculate_totals(frm);\n    },\n\n    activity_participants_reconciliation_remove: function(frm) {\n        calculate_totals(frm);\n    }\n});\n\nfunction get_currency_symbol(frm) {\n    if (frm.doc.currency) {\n        let currency_doc = frappe.model.get_doc('Currency', frm.doc.currency);\n        return currency_doc ? currency_doc.symbol : '';\n    }\n    return '';\n}\n\nfunction calculate_totals(frm) {\n    let total_spent = 0;\n    let total_amount_local = 0;\n\n    if (frm.doc.activity_participants_reconciliation) {\n        frm.doc.activity_participants_reconciliation.forEach(row => {\n            total_spent += parseFloat(row.total_paid) || 0;\n            total_amount_local += parseFloat(row.amount_in_local_currency) || 0;\n        });\n    }\n\n    let currency_symbol = get_currency_symbol(frm);\n\n    // Set values directly instead of using async set_value\n    frm.set_value('total_spent', currency_symbol + ' ' + format_number(total_spent));\n    frm.set_value('total_local_amount', format_number(total_amount_local));\n\n    let total_advance = 0;\n    if (frm.doc.currency === 'KES') {\n        total_advance = parseFloat(frm.doc.local_total_advance) || 0;\n    } else {\n        total_advance = get_number_value(frm.doc.total_advance);\n    }\n\n    frm.set_value('total_advance', currency_symbol + ' ' + format_number(total_advance));\n\n    let total_spent_value = get_number_value(frm.doc.total_spent);\n    let balance = total_advance - total_spent_value;\n\n    frm.set_value('total_balance', currency_symbol + ' ' + format_number(balance));\n}\n\nfunction format_number(value) {\n    if (!value) value = 0;\n    return parseFloat(value).toLocaleString('en-US', { \n        minimumFractionDigits: 2, \n        maximumFractionDigits: 2 \n    });\n}\n\nfunction get_number_value(value) {\n    if (!value) return 0;\n    return parseFloat(value.toString().replace(/[^\\d.-]/g, \"\")) || 0;\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Local Per Diem Rates",
  "enabled": 1,
  "modified": "2024-11-15 09:20:21.041384",
  "module": "ICL Corporate Services",
  "name": "Local Per Diem Rates",
  "script": "frappe.ui.form.on('Local Per Diem Rates', {\n    currency: function(frm) {\n        let selected_currency = frm.doc.currency;\n\n        if (selected_currency) {\n            frappe.call({\n                method: \"frappe.client.get_value\",\n                args: {\n                    doctype: \"Currency\",\n                    filters: { \"currency_name\": selected_currency },\n                    fieldname: \"symbol\"\n                },\n                callback: function(response) {\n                    if (response.message) {\n                        let currency_symbol = response.message.symbol;\n                        frm.set_value('fares', currency_symbol);\n                    } else {\n                        frm.set_value('fares', '');\n                    }\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "ICL Budget Template",
  "enabled": 1,
  "modified": "2024-11-25 11:54:57.415364",
  "module": "ICL Corporate Services",
  "name": "ICL Budget Template",
  "script": "frappe.ui.form.on('ICL Budget Template', {\n    refresh(frm) {\n    //\n    },\n    \n    indirect_cost_rate:function(frm, cdt, cdn){\n        calculate_cost(frm, cdt, cdn);\n    }\n});\n\nfrappe.ui.form.on('Budget Line Template', {\n    cost: function(frm, cdt, cdn) {\n        calculate_cost(frm, cdt, cdn);\n    },\n    unit_loe: function(frm, cdt, cdn) {\n        calculate_cost(frm, cdt, cdn);\n    },\n    rate: function(frm, cdt, cdn) {\n        calculate_cost(frm, cdt, cdn);\n    }\n});\n\nfunction calculate_cost(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    row.cost = parseFloat(row.unit_loe) * parseFloat(row.rate) || 0;\n\n    // Calculate the total cost for the specific budget line type\n    let total_cost = 0;\n    frm.doc.budget_line_template.forEach(function(d) {\n        if (d.budget_line === row.budget_line) {\n            total_cost += parseFloat(d.cost) || 0;\n        }\n    });\n\n    // Update the Budget Template Summary child table\n    let summary_row = frm.doc.budget_template_summary.find(d => d.budget_line === row.budget_line);\n    if (summary_row) {\n        summary_row.cost = total_cost.toLocaleString();\n    } else {\n        frm.add_child('budget_template_summary', {\n            budget_line: row.budget_line,\n            cost: total_cost\n        });\n    }\n\n    // Refresh the fields to show the updated values\n    frm.refresh_field('budget_line_template');\n    frm.refresh_field('budget_template_summary');\n\n    // Calculate indirect cost\n    calculate_indirect_cost(frm);\n}\n\nfunction calculate_indirect_cost(frm) {\n    let total_cost = 0;\n    frm.doc.budget_line_template.forEach(function(d) {\n        total_cost += parseFloat(d.cost) || 0;\n    });\n    \n    let indirect_cost_rate = parseFloat(frm.doc.indirect_cost_rate) || 0;\n    let indirect_cost = total_cost * (indirect_cost_rate / 100);\n    frm.set_value('indirect_cost_on_all_costs', indirect_cost.toLocaleString());\n\n    // Refresh the field to show the updated value\n    frm.refresh_field('indirect_cost_on_all_costs');\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Asset Damage Loss Theft Report Form",
  "enabled": 1,
  "modified": "2024-11-29 11:38:50.823695",
  "module": "ICL Corporate Services",
  "name": "New Asset Damage Loss Theft Report Form",
  "script": "frappe.ui.form.on('Asset Damage Loss Theft Report Form', {\n  reported_on: function (frm) {\n        if (frm.doc.reported_on && frm.doc.incident_date) {\n            const reported_on_date = frappe.datetime.str_to_obj(frm.doc.reported_on);\n            const incident_date = frappe.datetime.str_to_obj(frm.doc.incident_date);\n\n            if (reported_on_date < incident_date) {\n                frappe.msgprint({\n                    title: __('Validation Error'),\n                    message: __('The \"Reported On\" date cannot be earlier than the \"Incident Date\".'),\n                    indicator: 'red'\n                });\n\n                frm.set_value('reported_on', null);\n            }\n        }\n    },\n\n    incident_date: function (frm) {\n        if (frm.doc.reported_on && frm.doc.incident_date) {\n            const reported_on_date = frappe.datetime.str_to_obj(frm.doc.reported_on);\n            const incident_date = frappe.datetime.str_to_obj(frm.doc.incident_date);\n\n            if (reported_on_date < incident_date) {\n                frappe.msgprint({\n                    title: __('Validation Error'),\n                    message: __('The \"Incident Date\" cannot be after the \"Reported On\" date.'),\n                    indicator: 'red'\n                });\n\n                frm.set_value('incident_date', null);\n            }\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "General Requisition Form",
  "enabled": 1,
  "modified": "2024-12-05 09:32:22.454539",
  "module": "ICL Corporate Services",
  "name": "General Requisition Form",
  "script": "frappe.ui.form.on('General Requisition Form', {\n    refresh: function(frm) {\n        calculate_total(frm);\n    },\n    table_pegz_add: function(frm) {\n        calculate_total(frm);\n    },\n    table_pegz_remove: function(frm) {\n        calculate_total(frm);\n    }\n});\n\n// Trigger recalculation when the amount_kes field is updated in the child table\nfrappe.ui.form.on('General requisition description form', {\n    amount_kes: function(frm, cdt, cdn) {\n        calculate_total(frm);\n    }\n});\n\n// Function to calculate the total for amount_kes in the child table\nfunction calculate_total(frm) {\n    let total = 0;\n    if (frm.doc.table_pegz) {\n        frm.doc.table_pegz.forEach(row => {\n            total += parseFloat(row.amount_kes) || 0; // Safeguard against null/undefined values\n        });\n    }\n    frm.set_value('total', total);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Asset Damage Loss Theft Report Form",
  "enabled": 1,
  "modified": "2024-12-11 09:46:18.681063",
  "module": "ICL Corporate Services",
  "name": "Asset Damage Theft Report Form",
  "script": "frappe.ui.form.on('Asset Damage Loss Theft Report Form', {\n    onload: function(frm) {\n        // Configure date picker to disable future dates for incident_date and reported_on\n        frm.set_df_property('incident_date', 'datepicker', {\n            maxDate: frappe.datetime.nowdate()\n        });\n\n        frm.set_df_property('reported_on', 'datepicker', {\n            maxDate: frappe.datetime.nowdate()\n        });\n    },\n\n    // Real-time validation for incident_date\n    incident_date: function(frm) {\n        // Check if incident_date is in the future\n        if (frm.doc.incident_date && frappe.datetime.get_diff(frm.doc.incident_date, frappe.datetime.nowdate()) > 0) {\n            frappe.throw(__('Incident Date cannot be a future date.'));\n        }\n    },\n\n    // Real-time validation for reported_on\n    reported_on: function(frm) {\n        // Check if reported_on is before incident_date\n        if (frm.doc.reported_on && frm.doc.incident_date && frappe.datetime.get_diff(frm.doc.reported_on, frm.doc.incident_date) < 0) {\n            frappe.throw(__('Reported On date cannot be before Incident Date.'));\n        }\n\n        // Check if reported_on is in the future\n        if (frm.doc.reported_on && frappe.datetime.get_diff(frm.doc.reported_on, frappe.datetime.nowdate()) > 0) {\n            frappe.throw(__('Reported On date cannot be a future date.'));\n        }\n    }\n});\n",
  "view": "Form"
 }
]